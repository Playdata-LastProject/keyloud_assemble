{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./styles/HomeScreen.css';import{useContext}from'react';import{AppContext}from'../AppContext.js';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const HomeScreen=()=>{const navigate=useNavigate();const[searchResults,setSearchResults]=useState([]);const{folders,uploadedFiles,addFolder,addFileToFolder,setUploadedFiles}=useContext(AppContext);const[isUploadMenuOpen,setUploadMenuOpen]=useState(false);const[addedFolders,setAddedFolders]=useState([{name:'최근 업로드 폴더',id:1}]);const[userKeyword,setUserKeyword]=useState('');const[selectedItem,setSelectedItem]=useState(null);const[isRenamePopupOpen,setRenamePopupOpen]=useState(false);const[newName,setNewName]=useState('');useEffect(()=>{// 페이지 로드 시 로컬 스토리지에서 uploadedFiles 값을 가져옴\nconst storedUploadedFiles=localStorage.getItem('uploadedFiles');if(storedUploadedFiles){setUploadedFiles(JSON.parse(storedUploadedFiles));}// 여기서 기본 폴더 정보를 추가합니다.\nsetAddedFolders([{name:'최근 업로드 폴더',id:1}]);},[setUploadedFiles]);useEffect(()=>{const handleBeforeUnload=()=>{localStorage.setItem('uploadedFiles',JSON.stringify(uploadedFiles));};window.addEventListener('beforeunload',handleBeforeUnload);return()=>{window.removeEventListener('beforeunload',handleBeforeUnload);};},[uploadedFiles]);const[isCreateFolderPopupOpen,setCreateFolderPopupOpen]=useState(false);const[newFolderName,setNewFolderName]=useState('');const[isFileUploadPopupOpen,setFileUploadPopupOpen]=useState(false);const[selectedFile,setSelectedFile]=useState(null);const[customFileName,setCustomFileName]=useState('');const[selectedFolder,setSelectedFolder]=useState('');const[uploadedFilesState,setUploadedFilesState]=useState({});const handleUploadButtonClick=()=>{setUploadMenuOpen(!isUploadMenuOpen);};// 파일 업로드 팝업 열기\nconst handleFileUploadButtonClick=()=>{setFileUploadPopupOpen(true);};// 파일 선택\nconst handleFileSelect=event=>{const file=event.target.files[0];setSelectedFile(file);};// 업로드 버튼 클릭 시\nconst handleUpload=async()=>{const formData=new FormData();formData.append('file',selectedFile);formData.append('customFileName',customFileName);formData.append('selectedFolder',selectedFolder);try{const response=await fetch('http://localhost:5000/upload_files',{method:'POST',body:formData});if(response.ok){console.log('File uploaded successfully');// 서버에서 반환한 데이터를 처리 (예: 응답에서 업로드된 파일 정보를 얻어와서 상태 업데이트)\n}else{console.error('File upload failed');}}catch(error){console.error('Error during file upload:',error);}// 상태 초기화\nsetFileUploadPopupOpen(false);setSelectedFile(null);setCustomFileName('');setSelectedFolder('');};const handleNavigateToKeywordResult=()=>{navigate(\"/keyword-result?keyword=\".concat(userKeyword));};const handleFolderIconClick=folderName=>{setUploadMenuOpen(false);// 여기서 폴더 아이콘 클릭 시의 로직을 추가하세요\n};const handleCreateFolderButtonClick=()=>{setCreateFolderPopupOpen(true);};const handleCreateFolder=()=>{if(newFolderName.trim()!==''){const newFolder={name:newFolderName,id:Date.now()};setAddedFolders(prevFolders=>[...prevFolders,newFolder]);addFolder(newFolder);setNewFolderName('');}setCreateFolderPopupOpen(false);};const handleItemClick=item=>{setSelectedItem(item);setNewName(item.name);};const handleRename=()=>{if(newName.trim()!==''){const updatedFolders=addedFolders.map(folder=>folder.id===selectedItem.id?{...folder,name:newName}:folder);setAddedFolders(updatedFolders);// 파일 수정 로직은 uploadedFiles 상태를 업데이트해야 합니다.\n// 추가: handleRename 함수 내용을 여기에 추가\nsetRenamePopupOpen(false);setSelectedItem(null);}};// 수정: handleMoveToTrash 함수 정의\nconst handleMoveToTrash=()=>{if(newName.trim()!==''){// handleRename 함수 내용을 여기에 직접 구현\nconst updatedFolders=addedFolders.map(folder=>folder.id===selectedItem.id?{...folder,name:newName}:folder);setAddedFolders(updatedFolders);// 파일 수정 로직은 uploadedFiles 상태를 업데이트해야 합니다.\n// 추가: handleMoveToTrash 함수 내용을 여기에 추가\nsetRenamePopupOpen(false);setSelectedItem(null);}};return/*#__PURE__*/_jsxs(\"div\",{children:[addedFolders.map(folder=>{var _uploadedFiles$folder;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"folder-content\",onClick:()=>handleFolderIconClick(folder.name),children:[/*#__PURE__*/_jsx(\"div\",{className:\"folder-icon img\",children:/*#__PURE__*/_jsx(\"img\",{src:\"/images/folder-icon.png\",alt:\"\\uD3F4\\uB354 \\uC544\\uC774\\uCF58\",style:{width:'20px',height:'20px'}})}),/*#__PURE__*/_jsx(\"div\",{className:\"folder-name\",children:folder.name})]}),/*#__PURE__*/_jsx(\"div\",{className:\"uploaded-files-container\",children:(_uploadedFiles$folder=uploadedFiles[folder.name])===null||_uploadedFiles$folder===void 0?void 0:_uploadedFiles$folder.map((file,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"uploaded-file\",children:[/*#__PURE__*/_jsx(\"img\",{src:file.icon,alt:\"File Icon\",className:\"file-icon\"}),/*#__PURE__*/_jsx(\"div\",{className:\"file-name\",children:file.name})]},index))})]},folder.id);}),/*#__PURE__*/_jsx(\"button\",{className:\"upload-button\",onClick:handleUploadButtonClick,children:/*#__PURE__*/_jsx(\"img\",{src:\"/images/upload.png\",alt:\"\\uC5C5\\uB85C\\uB4DC \\uC544\\uC774\\uCF58\",style:{width:'40px',height:'35px'}})}),isUploadMenuOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"upload-menu\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"upload-menu-button\",onClick:handleCreateFolderButtonClick,children:\"\\uD3F4\\uB354 \\uC0DD\\uC131\"}),/*#__PURE__*/_jsx(\"button\",{className:\"upload-menu-button\",onClick:handleFileUploadButtonClick,children:\"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"})]}),isCreateFolderPopupOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"create-folder-popup\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"create-folder-input\"// 추가: 클래스 이름 추가\n,type:\"text\",placeholder:\"\\uD3F4\\uB354\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",value:newFolderName,onChange:e=>setNewFolderName(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"create-folder-button\",onClick:handleCreateFolder,children:\"\\uD3F4\\uB354 \\uC0DD\\uC131\"})]}),isFileUploadPopupOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-popup\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"file-upload-input\",type:\"file\",onChange:handleFileSelect}),/*#__PURE__*/_jsx(\"input\",{className:\"file-upload-custom-input\",type:\"text\",placeholder:\"\\uD30C\\uC77C\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",value:customFileName,onChange:e=>setCustomFileName(e.target.value)}),/*#__PURE__*/_jsxs(\"select\",{className:\"file-upload-select\",value:selectedFolder,onChange:e=>setSelectedFolder(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",disabled:true,children:\"Select a folder\"}),addedFolders.map(folder=>/*#__PURE__*/_jsx(\"option\",{value:folder.name,children:folder.name},folder.id))]}),/*#__PURE__*/_jsx(\"button\",{className:\"file-upload-button\",onClick:handleUpload,children:\"\\uC5C5\\uB85C\\uB4DC\"})]}),isRenamePopupOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"rename-popup\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uC0C8\\uB85C\\uC6B4 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",value:newName,onChange:e=>setNewName(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRename,children:\"\\uC774\\uB984 \\uBCC0\\uACBD\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleMoveToTrash,children:\"\\uD734\\uC9C0\\uD1B5\\uC73C\\uB85C \\uC774\\uB3D9\"})]})]});};export default HomeScreen;","map":{"version":3,"names":["React","useState","useEffect","useContext","AppContext","useNavigate","jsx","_jsx","jsxs","_jsxs","HomeScreen","navigate","searchResults","setSearchResults","folders","uploadedFiles","addFolder","addFileToFolder","setUploadedFiles","isUploadMenuOpen","setUploadMenuOpen","addedFolders","setAddedFolders","name","id","userKeyword","setUserKeyword","selectedItem","setSelectedItem","isRenamePopupOpen","setRenamePopupOpen","newName","setNewName","storedUploadedFiles","localStorage","getItem","JSON","parse","handleBeforeUnload","setItem","stringify","window","addEventListener","removeEventListener","isCreateFolderPopupOpen","setCreateFolderPopupOpen","newFolderName","setNewFolderName","isFileUploadPopupOpen","setFileUploadPopupOpen","selectedFile","setSelectedFile","customFileName","setCustomFileName","selectedFolder","setSelectedFolder","uploadedFilesState","setUploadedFilesState","handleUploadButtonClick","handleFileUploadButtonClick","handleFileSelect","event","file","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","ok","console","log","error","handleNavigateToKeywordResult","concat","handleFolderIconClick","folderName","handleCreateFolderButtonClick","handleCreateFolder","trim","newFolder","Date","now","prevFolders","handleItemClick","item","handleRename","updatedFolders","map","folder","handleMoveToTrash","children","_uploadedFiles$folder","className","onClick","src","alt","style","width","height","index","icon","type","placeholder","value","onChange","e","disabled"],"sources":["C:/Users/USER/OneDrive/Documents/GitHub/keyloud_assemble/frontend/src/components/HomeScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './styles/HomeScreen.css';\r\nimport { useContext } from 'react';\r\nimport { AppContext } from '../AppContext.js';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeScreen = () => {\r\n  const navigate = useNavigate();\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const { folders, uploadedFiles, addFolder, addFileToFolder, setUploadedFiles, } = useContext(AppContext);\r\n  const [isUploadMenuOpen, setUploadMenuOpen] = useState(false);\r\n  const [addedFolders, setAddedFolders] = useState([\r\n    { name: '최근 업로드 폴더', id: 1 },\r\n  ]);\r\n  const [userKeyword, setUserKeyword] = useState(''); \r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [isRenamePopupOpen, setRenamePopupOpen] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  useEffect(() => {\r\n    // 페이지 로드 시 로컬 스토리지에서 uploadedFiles 값을 가져옴\r\n    const storedUploadedFiles = localStorage.getItem('uploadedFiles');\r\n    if (storedUploadedFiles) {\r\n      setUploadedFiles(JSON.parse(storedUploadedFiles));\r\n    }\r\n\r\n    // 여기서 기본 폴더 정보를 추가합니다.\r\n    setAddedFolders([{ name: '최근 업로드 폴더', id: 1 }]);\r\n  }, [setUploadedFiles]);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      localStorage.setItem('uploadedFiles', JSON.stringify(uploadedFiles));\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, [uploadedFiles]);  \r\n\r\n  const [isCreateFolderPopupOpen, setCreateFolderPopupOpen] = useState(false);\r\n  const [newFolderName, setNewFolderName] = useState('');\r\n\r\n  const [isFileUploadPopupOpen, setFileUploadPopupOpen] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [customFileName, setCustomFileName] = useState('');\r\n  const [selectedFolder, setSelectedFolder] = useState('');\r\n  const [uploadedFilesState, setUploadedFilesState] = useState({});\r\n   \r\n  \r\n  \r\n  \r\n  const handleUploadButtonClick = () => {\r\n    setUploadMenuOpen(!isUploadMenuOpen);\r\n  };\r\n\r\n  // 파일 업로드 팝업 열기\r\n  const handleFileUploadButtonClick = () => {\r\n    setFileUploadPopupOpen(true);\r\n  };\r\n\r\n  // 파일 선택\r\n  const handleFileSelect = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  // 업로드 버튼 클릭 시\r\n  const handleUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append('file', selectedFile);\r\n    formData.append('customFileName', customFileName);\r\n    formData.append('selectedFolder', selectedFolder);\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:5000/upload_files', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      if (response.ok) {\r\n        console.log('File uploaded successfully');\r\n        // 서버에서 반환한 데이터를 처리 (예: 응답에서 업로드된 파일 정보를 얻어와서 상태 업데이트)\r\n      } else {\r\n        console.error('File upload failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during file upload:', error);\r\n    }\r\n  \r\n    // 상태 초기화\r\n    setFileUploadPopupOpen(false);\r\n    setSelectedFile(null);\r\n    setCustomFileName('');\r\n    setSelectedFolder('');\r\n  };\r\n  \r\n\r\n  const handleNavigateToKeywordResult = () => {\r\n    navigate(`/keyword-result?keyword=${userKeyword}`);\r\n  };\r\n\r\n  const handleFolderIconClick = (folderName) => {\r\n    setUploadMenuOpen(false);\r\n    // 여기서 폴더 아이콘 클릭 시의 로직을 추가하세요\r\n  };\r\n\r\n  const handleCreateFolderButtonClick = () => {\r\n    setCreateFolderPopupOpen(true);\r\n  };\r\n\r\n  const handleCreateFolder = () => {\r\n    if (newFolderName.trim() !== '') {\r\n      const newFolder = { name: newFolderName, id: Date.now() };\r\n      setAddedFolders((prevFolders) => [...prevFolders, newFolder]);\r\n      addFolder(newFolder);\r\n      setNewFolderName('');\r\n    }\r\n    setCreateFolderPopupOpen(false);\r\n  };\r\n\r\n  const handleItemClick = (item) => {\r\n    setSelectedItem(item);\r\n    setNewName(item.name);\r\n  };\r\n\r\n  \r\n  const handleRename = () => {\r\n    if (newName.trim() !== '') {\r\n      const updatedFolders = addedFolders.map((folder) =>\r\n        folder.id === selectedItem.id ? { ...folder, name: newName } : folder\r\n      );\r\n      setAddedFolders(updatedFolders);\r\n\r\n      // 파일 수정 로직은 uploadedFiles 상태를 업데이트해야 합니다.\r\n      // 추가: handleRename 함수 내용을 여기에 추가\r\n\r\n      setRenamePopupOpen(false);\r\n      setSelectedItem(null);\r\n    }\r\n  };\r\n\r\n  // 수정: handleMoveToTrash 함수 정의\r\n  const handleMoveToTrash = () => {\r\n    if (newName.trim() !== '') {\r\n      // handleRename 함수 내용을 여기에 직접 구현\r\n      const updatedFolders = addedFolders.map((folder) =>\r\n        folder.id === selectedItem.id ? { ...folder, name: newName } : folder\r\n      );\r\n      setAddedFolders(updatedFolders);\r\n\r\n      // 파일 수정 로직은 uploadedFiles 상태를 업데이트해야 합니다.\r\n      // 추가: handleMoveToTrash 함수 내용을 여기에 추가\r\n\r\n      setRenamePopupOpen(false);\r\n      setSelectedItem(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 폴더 아이콘과 폴더명 세트 */}\r\n      {addedFolders.map((folder) => (\r\n       <div key={folder.id}>\r\n        <div className=\"folder-content\" onClick={() => handleFolderIconClick(folder.name)}>\r\n         <div className=\"folder-icon img\">\r\n         <img src=\"/images/folder-icon.png\" alt=\"폴더 아이콘\" style={{ width: '20px', height: '20px' }} />\r\n         </div>\r\n         <div className=\"folder-name\">{folder.name}</div>\r\n        </div>\r\n        <div className=\"uploaded-files-container\">\r\n         {uploadedFiles[folder.name]?.map((file, index) => (\r\n         <div key={index} className=\"uploaded-file\">\r\n          <img src={file.icon} alt=\"File Icon\" className=\"file-icon\" />\r\n          <div className=\"file-name\">{file.name}</div>\r\n         </div>\r\n        ))}\r\n        </div>\r\n       </div>\r\n      ))}\r\n\r\n      {/* 업로드 버튼 */}\r\n      <button className=\"upload-button\" onClick={handleUploadButtonClick}>\r\n        <img src=\"/images/upload.png\" alt=\"업로드 아이콘\" style={{ width: '40px', height: '35px' }} />\r\n      </button>\r\n\r\n      {/* 업로드 메뉴 */}\r\n      {isUploadMenuOpen && (\r\n        <div className=\"upload-menu\">\r\n          <button className=\"upload-menu-button\" onClick={handleCreateFolderButtonClick}>\r\n            폴더 생성\r\n          </button>\r\n          <button className=\"upload-menu-button\" onClick={handleFileUploadButtonClick}>파일 업로드</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* 폴더 생성 팝업 */}\r\n      {isCreateFolderPopupOpen && (\r\n        <div className=\"create-folder-popup\">\r\n          <input\r\n           className=\"create-folder-input\" // 추가: 클래스 이름 추가\r\n           type=\"text\"\r\n           placeholder=\"폴더명을 입력하세요\"\r\n           value={newFolderName}\r\n           onChange={(e) => setNewFolderName(e.target.value)}\r\n          />\r\n         <button className=\"create-folder-button\" onClick={handleCreateFolder}>폴더 생성</button>\r\n       </div>\r\n      )}\r\n      \r\n      {/* 파일 업로드 팝업 */}\r\n      {isFileUploadPopupOpen && (\r\n        <div className=\"file-upload-popup\">\r\n          {/* 파일 선택을 위한 파일 입력란 */}\r\n          <input className=\"file-upload-input\" type=\"file\" onChange={handleFileSelect} />\r\n\r\n          {/* 사용자 정의 파일명 입력을 위한 입력란 */}\r\n          <input\r\n            className=\"file-upload-custom-input\"\r\n            type=\"text\"\r\n            placeholder=\"파일명을 입력하세요\"\r\n            value={customFileName}\r\n            onChange={(e) => setCustomFileName(e.target.value)}\r\n          />\r\n\r\n          {/* 폴더 선택을 위한 드롭다운 또는 UI */}\r\n          {/* 폴더를 선택하고 selectedFolder 상태를 업데이트하는 논리 또는 UI를 추가하세요 */}\r\n          <select\r\n            className=\"file-upload-select\"\r\n            value={selectedFolder}\r\n            onChange={(e) => setSelectedFolder(e.target.value)}\r\n          >\r\n            <option value=\"\" disabled>Select a folder</option>\r\n            {addedFolders.map((folder) => (\r\n              <option key={folder.id} value={folder.name}>{folder.name}</option>\r\n              ))}\r\n              </select>\r\n    \r\n              {/* 업로드 버튼 */}\r\n              <button \r\n              className=\"file-upload-button\"\r\n              onClick={handleUpload}>업로드</button>\r\n            </div>\r\n          )}\r\n        \r\n      {/* 팝업창 */}\r\n      {isRenamePopupOpen && (\r\n        <div className=\"rename-popup\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"새로운 이름을 입력하세요\"\r\n            value={newName}\r\n            onChange={(e) => setNewName(e.target.value)}\r\n          />\r\n          {/* 수정: handleRename 함수 호출로 변경 */}\r\n          <button onClick={handleRename}>이름 변경</button>\r\n          {/* 수정: handleMoveToTrash 함수 호출로 변경 */}\r\n          <button onClick={handleMoveToTrash}>휴지통으로 이동</button>\r\n        </div>\r\n      )}\r\n\r\n        </div>\r\n      );\r\n    };\r\n\r\nexport default HomeScreen;           "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}