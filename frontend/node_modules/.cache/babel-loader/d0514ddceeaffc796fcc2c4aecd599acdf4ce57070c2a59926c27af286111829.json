{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\AppData\\\\Roaming\\\\SPB_Data\\\\keyloud_assemble\\\\frontend\\\\src\\\\AppContext.js\",\n  _s = $RefreshSig$();\n// AppContext.js\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [uploadedFiles, setUploadedFiles] = useState({});\n  const [folders, setFolders] = useState([]);\n  const addFileToFolder = (folderName, file) => {\n    const updatedFiles = {\n      ...uploadedFiles\n    };\n    const updatedFileList = updatedFiles[folderName] ? [...updatedFiles[folderName]] : [];\n    updatedFileList.push(file);\n    updatedFiles[folderName] = updatedFileList;\n    setUploadedFiles(updatedFiles);\n  };\n  const addFolder = folder => {\n    setFolders(prevFolders => [...prevFolders, folder]);\n  };\n  const contextValue = {\n    uploadedFiles,\n    setUploadedFiles,\n    addFileToFolder,\n    addFolder,\n    folders\n  };\n  useEffect(() => {\n    // Save folders to local storage\n    localStorage.setItem('folders', JSON.stringify(folders));\n  }, [folders]);\n  useEffect(() => {\n    // Load folders from local storage on initial render\n    const storedFolders = localStorage.getItem('folders');\n    if (storedFolders) {\n      setFolders(JSON.parse(storedFolders));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"k3dWIBEOykL35Ha9FFY2A8ZaQDA=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","uploadedFiles","setUploadedFiles","folders","setFolders","addFileToFolder","folderName","file","updatedFiles","updatedFileList","push","addFolder","folder","prevFolders","contextValue","localStorage","setItem","JSON","stringify","storedFolders","getItem","parse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/AppData/Roaming/SPB_Data/keyloud_assemble/frontend/src/AppContext.js"],"sourcesContent":["// AppContext.js\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [uploadedFiles, setUploadedFiles] = useState({});\r\n  const [folders, setFolders] = useState([]);\r\n\r\n  const addFileToFolder = (folderName, file) => {\r\n    const updatedFiles = { ...uploadedFiles };\r\n    const updatedFileList = updatedFiles[folderName] ? [...updatedFiles[folderName]] : [];\r\n    updatedFileList.push(file);\r\n    updatedFiles[folderName] = updatedFileList;\r\n    setUploadedFiles(updatedFiles);\r\n  };\r\n\r\n  const addFolder = (folder) => {\r\n    setFolders((prevFolders) => [...prevFolders, folder]);\r\n  };\r\n\r\n  const contextValue = {\r\n    uploadedFiles,\r\n    setUploadedFiles,\r\n    addFileToFolder,\r\n    addFolder,\r\n    folders,\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Save folders to local storage\r\n    localStorage.setItem('folders', JSON.stringify(folders));\r\n  }, [folders]);\r\n\r\n  useEffect(() => {\r\n    // Load folders from local storage on initial render\r\n    const storedFolders = localStorage.getItem('folders');\r\n    if (storedFolders) {\r\n      setFolders(JSON.parse(storedFolders));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AppContext.Provider value={contextValue}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,UAAU,gBAAGL,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMM,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMY,eAAe,GAAGA,CAACC,UAAU,EAAEC,IAAI,KAAK;IAC5C,MAAMC,YAAY,GAAG;MAAE,GAAGP;IAAc,CAAC;IACzC,MAAMQ,eAAe,GAAGD,YAAY,CAACF,UAAU,CAAC,GAAG,CAAC,GAAGE,YAAY,CAACF,UAAU,CAAC,CAAC,GAAG,EAAE;IACrFG,eAAe,CAACC,IAAI,CAACH,IAAI,CAAC;IAC1BC,YAAY,CAACF,UAAU,CAAC,GAAGG,eAAe;IAC1CP,gBAAgB,CAACM,YAAY,CAAC;EAChC,CAAC;EAED,MAAMG,SAAS,GAAIC,MAAM,IAAK;IAC5BR,UAAU,CAAES,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAED,MAAM,CAAC,CAAC;EACvD,CAAC;EAED,MAAME,YAAY,GAAG;IACnBb,aAAa;IACbC,gBAAgB;IAChBG,eAAe;IACfM,SAAS;IACTR;EACF,CAAC;EAEDT,SAAS,CAAC,MAAM;IACd;IACAqB,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACf,OAAO,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEbT,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,aAAa,GAAGJ,YAAY,CAACK,OAAO,CAAC,SAAS,CAAC;IACrD,IAAID,aAAa,EAAE;MACjBf,UAAU,CAACa,IAAI,CAACI,KAAK,CAACF,aAAa,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEvB,OAAA,CAACC,UAAU,CAACyB,QAAQ;IAACC,KAAK,EAAET,YAAa;IAAAf,QAAA,EACtCA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAAC3B,EAAA,CA1CWF,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}