{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\AppData\\\\Roaming\\\\SPB_Data\\\\keyloud_assemble\\\\frontend\\\\src\\\\components\\\\HomeScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/HomeScreen.css\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"../AppContext.js\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [searchResults, setSearchResults] = useState([]);\n  const {\n    folders,\n    uploadedFiles,\n    addFolder,\n    addFileToFolder,\n    setUploadedFiles\n  } = useContext(AppContext);\n  const [isUploadMenuOpen, setUploadMenuOpen] = useState(false);\n  const [addedFolders, setAddedFolders] = useState([{\n    name: \"최근 업로드 폴더\",\n    id: 1\n  }]);\n  const [userKeyword, setUserKeyword] = useState(\"\");\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [isRenamePopupOpen, setRenamePopupOpen] = useState(false);\n  const [newName, setNewName] = useState(\"\");\n  const [folderFiles, setFolderFiles] = useState({});\n  useEffect(() => {\n    // 페이지 로드 시 로컬 스토리지에서 uploadedFiles 값을 가져옴\n    const storedUploadedFiles = localStorage.getItem(\"uploadedFiles\");\n    if (storedUploadedFiles) {\n      setUploadedFiles(JSON.parse(storedUploadedFiles));\n    }\n\n    // 로컬 스토리지에서 폴더 정보를 가져옴\n    const storedFolders = localStorage.getItem(\"addedFolders\");\n    if (storedFolders) {\n      setAddedFolders(JSON.parse(storedFolders));\n    } else {\n      // 초기 폴더 정보 설정\n      setAddedFolders([{\n        name: \"최근 업로드 폴더\",\n        id: 1\n      }]);\n      localStorage.setItem(\"addedFolders\", JSON.stringify([{\n        name: \"최근 업로드 폴더\",\n        id: 1\n      }]));\n    }\n  }, [setUploadedFiles, setAddedFolders]);\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      localStorage.setItem(\"uploadedFiles\", JSON.stringify(uploadedFiles));\n      localStorage.setItem(\"addedFolders\", JSON.stringify(addedFolders));\n    };\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n  }, [uploadedFiles, addedFolders]);\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/keyword_search?keyword=${userKeyword}`);\n        const results = response.data;\n        setSearchResults(results);\n      } catch (error) {\n        console.error('검색 결과를 가져오는 중 에러 발생:', error);\n        // 에러 처리\n      }\n    };\n    if (userKeyword) {\n      fetchSearchResults();\n    }\n  }, [userKeyword]);\n  const [isCreateFolderPopupOpen, setCreateFolderPopupOpen] = useState(false);\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const [isFileUploadPopupOpen, setFileUploadPopupOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [customFileName, setCustomFileName] = useState(\"\");\n  const [selectedFolder, setSelectedFolder] = useState(\"\");\n  const [uploadedFilesState, setUploadedFilesState] = useState({});\n  const [folderVisibility, setFolderVisibility] = useState({});\n  const handleUploadButtonClick = () => {\n    setUploadMenuOpen(!isUploadMenuOpen);\n  };\n  const handleFileUploadButtonClick = () => {\n    setFileUploadPopupOpen(true);\n  };\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n  };\n  const handleUpload = async () => {\n    try {\n      if (!selectedFile || !selectedFolder) {\n        console.error(\"No file selected\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"files\", selectedFile);\n      formData.append(\"customFileName\", customFileName);\n      formData.append(\"selectedFolder\", selectedFolder);\n      formData.append(\"uploadDate\", new Date().toISOString());\n      formData.append(\"folderName\", selectedFolder);\n      const response = await axios.post(\"http://localhost:5000/upload_files\", formData);\n      const data = await response.json();\n      console.log(response.data.message);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    }\n  };\n  const handleNavigateToKeywordResult = () => {\n    navigate(`/keyword-result?keyword=${userKeyword}`);\n  };\n  const handleFolderIconClick = async folderName => {\n    try {\n      const response = await axios.get(`http://localhost:5000/get_files?folder=${encodeURIComponent(folderName)}`);\n      const files = response.data;\n      console.log(files);\n\n      // 클릭한 폴더의 가시성을 토글합니다.\n      setFolderVisibility(prevVisibility => ({\n        ...prevVisibility,\n        [folderName]: !prevVisibility[folderName]\n      }));\n\n      // 파일 목록 상태를 업데이트합니다.\n      setFolderFiles(prevFiles => ({\n        ...prevFiles,\n        [folderName]: files\n      }));\n    } catch (error) {\n      console.error('Error fetching files:', error);\n      // 에러 처리 로직 추가\n    }\n  };\n  const handleCreateFolderButtonClick = () => {\n    setCreateFolderPopupOpen(true);\n  };\n  const handleCreateFolder = async () => {\n    if (newFolderName.trim() !== \"\") {\n      const newFolder = {\n        name: newFolderName,\n        id: Date.now()\n      };\n      setAddedFolders(prevFolders => [...prevFolders, newFolder]);\n      localStorage.setItem(\"addedFolders\", JSON.stringify([...addedFolders, newFolder]));\n      addFolder(newFolder);\n\n      // 서버에 새로운 폴더 정보 전송\n      try {\n        await axios.post(\"http://localhost:5000/create_folder\", {\n          folder: newFolder\n        });\n      } catch (error) {\n        console.error('Error creating folder:', error);\n        // 에러 처리 로직 추가\n      }\n      setNewFolderName(\"\");\n    }\n    setCreateFolderPopupOpen(false);\n  };\n  const handleItemClick = item => {\n    setSelectedItem(item);\n    setNewName(item.name);\n  };\n  const handleRename = () => {\n    if (newName.trim() !== \"\") {\n      const updatedFolders = addedFolders.map(folder => folder.id === selectedItem.id ? {\n        ...folder,\n        name: newName\n      } : folder);\n      setAddedFolders(updatedFolders);\n      setRenamePopupOpen(false);\n      setSelectedItem(null);\n    }\n  };\n  const handleMoveToTrash = () => {\n    if (newName.trim() !== \"\") {\n      const updatedFolders = addedFolders.map(folder => folder.id === selectedItem.id ? {\n        ...folder,\n        name: newName\n      } : folder);\n      setAddedFolders(updatedFolders);\n      setRenamePopupOpen(false);\n      setSelectedItem(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [addedFolders.map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-content\",\n        onClick: () => handleFolderIconClick(folder.name),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folder-icon img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/folder-icon.png\",\n            alt: \"\\uD3F4\\uB354 \\uC544\\uC774\\uCF58\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folder-name\",\n          children: folder.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), folderVisibility[folder.name] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploaded-files-container\",\n        children: folderFiles[folder.name] && folderFiles[folder.name].map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploaded-file\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/file-icon.png\",\n            alt: \"File Icon\",\n            className: \"file-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-name\",\n            children: file.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-date\",\n            children: file.uploadDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this)]\n    }, folder.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upload-button\",\n      onClick: handleUploadButtonClick,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/upload.png\",\n        alt: \"\\uC5C5\\uB85C\\uB4DC \\uC544\\uC774\\uCF58\",\n        style: {\n          width: \"40px\",\n          height: \"35px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), isUploadMenuOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-menu-button\",\n        onClick: handleCreateFolderButtonClick,\n        children: \"\\uD3F4\\uB354 \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-menu-button\",\n        onClick: handleFileUploadButtonClick,\n        children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), isCreateFolderPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-folder-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"create-folder-input\",\n        type: \"text\",\n        placeholder: \"\\uD3F4\\uB354\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: newFolderName,\n        onChange: e => setNewFolderName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-folder-button\",\n        onClick: handleCreateFolder,\n        children: \"\\uD3F4\\uB354 \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), isFileUploadPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"file-upload-input\",\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"file-upload-custom-input\",\n        type: \"text\",\n        placeholder: \"\\uD30C\\uC77C\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: customFileName,\n        onChange: e => setCustomFileName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"file-upload-select\",\n        value: selectedFolder,\n        onChange: e => setSelectedFolder(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), addedFolders.map(folder => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: folder.name,\n          children: folder.name\n        }, folder.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"file-upload-button\",\n        onClick: handleUpload,\n        children: \"\\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this), isRenamePopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rename-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uC0C8\\uB85C\\uC6B4 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: newName,\n        onChange: e => setNewName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRename,\n        children: \"\\uC774\\uB984 \\uBCC0\\uACBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMoveToTrash,\n        children: \"\\uD734\\uC9C0\\uD1B5\\uC73C\\uB85C \\uC774\\uB3D9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this), userKeyword && searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC80\\uC0C9 \\uACB0\\uACFC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), searchResults.map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-result\",\n        children: [result.type === 'folder' ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/folder-icon.png\",\n          alt: \"\\uD3F4\\uB354 \\uC544\\uC774\\uCF58\",\n          className: \"folder-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/file-icon.png\",\n          alt: \"\\uD30C\\uC77C \\uC544\\uC774\\uCF58\",\n          className: \"file-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-name\",\n          children: result.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }, this)]\n      }, result.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeScreen, \"LhkCsIquP2SVs83owgwqUqHbqM0=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeScreen;\nexport default HomeScreen;\nvar _c;\n$RefreshReg$(_c, \"HomeScreen\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AppContext","useNavigate","axios","jsxDEV","_jsxDEV","HomeScreen","_s","navigate","searchResults","setSearchResults","folders","uploadedFiles","addFolder","addFileToFolder","setUploadedFiles","isUploadMenuOpen","setUploadMenuOpen","addedFolders","setAddedFolders","name","id","userKeyword","setUserKeyword","selectedItem","setSelectedItem","isRenamePopupOpen","setRenamePopupOpen","newName","setNewName","folderFiles","setFolderFiles","storedUploadedFiles","localStorage","getItem","JSON","parse","storedFolders","setItem","stringify","handleBeforeUnload","window","addEventListener","removeEventListener","fetchSearchResults","response","get","results","data","error","console","isCreateFolderPopupOpen","setCreateFolderPopupOpen","newFolderName","setNewFolderName","isFileUploadPopupOpen","setFileUploadPopupOpen","selectedFile","setSelectedFile","customFileName","setCustomFileName","selectedFolder","setSelectedFolder","uploadedFilesState","setUploadedFilesState","folderVisibility","setFolderVisibility","handleUploadButtonClick","handleFileUploadButtonClick","handleFileSelect","event","file","target","files","handleUpload","formData","FormData","append","Date","toISOString","post","json","log","message","handleNavigateToKeywordResult","handleFolderIconClick","folderName","encodeURIComponent","prevVisibility","prevFiles","handleCreateFolderButtonClick","handleCreateFolder","trim","newFolder","now","prevFolders","folder","handleItemClick","item","handleRename","updatedFolders","map","handleMoveToTrash","children","className","onClick","src","alt","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","index","filename","uploadDate","type","placeholder","value","onChange","e","disabled","length","result","_c","$RefreshReg$"],"sources":["C:/Users/USER/AppData/Roaming/SPB_Data/keyloud_assemble/frontend/src/components/HomeScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/HomeScreen.css\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext.js\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nconst HomeScreen = () => {\r\n  const navigate = useNavigate();\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const {\r\n    folders,\r\n    uploadedFiles,\r\n    addFolder,\r\n    addFileToFolder,\r\n    setUploadedFiles,\r\n  } = useContext(AppContext);\r\n  const [isUploadMenuOpen, setUploadMenuOpen] = useState(false);\r\n  const [addedFolders, setAddedFolders] = useState([\r\n    { name: \"최근 업로드 폴더\", id: 1 },\r\n  ]);\r\n  const [userKeyword, setUserKeyword] = useState(\"\");\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [isRenamePopupOpen, setRenamePopupOpen] = useState(false);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [folderFiles, setFolderFiles] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n    // 페이지 로드 시 로컬 스토리지에서 uploadedFiles 값을 가져옴\r\n    const storedUploadedFiles = localStorage.getItem(\"uploadedFiles\");\r\n    if (storedUploadedFiles) {\r\n      setUploadedFiles(JSON.parse(storedUploadedFiles));\r\n    }\r\n\r\n    // 로컬 스토리지에서 폴더 정보를 가져옴\r\n    const storedFolders = localStorage.getItem(\"addedFolders\");\r\n    if (storedFolders) {\r\n      setAddedFolders(JSON.parse(storedFolders));\r\n    } else {\r\n      // 초기 폴더 정보 설정\r\n      setAddedFolders([{ name: \"최근 업로드 폴더\", id: 1 }]);\r\n      localStorage.setItem(\"addedFolders\", JSON.stringify([{ name: \"최근 업로드 폴더\", id: 1 }]));\r\n    }\r\n  }, [setUploadedFiles, setAddedFolders]);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      localStorage.setItem(\"uploadedFiles\", JSON.stringify(uploadedFiles));\r\n      localStorage.setItem(\"addedFolders\", JSON.stringify(addedFolders));\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n    };\r\n  }, [uploadedFiles, addedFolders]);\r\n\r\n  useEffect(() => {\r\n    const fetchSearchResults = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/keyword_search?keyword=${userKeyword}`);\r\n        const results = response.data;\r\n        setSearchResults(results);\r\n      } catch (error) {\r\n        console.error('검색 결과를 가져오는 중 에러 발생:', error);\r\n        // 에러 처리\r\n      }\r\n    };\r\n  \r\n    if (userKeyword) {\r\n      fetchSearchResults();\r\n    }\r\n  }, [userKeyword]);\r\n\r\n  const [isCreateFolderPopupOpen, setCreateFolderPopupOpen] = useState(false);\r\n  const [newFolderName, setNewFolderName] = useState(\"\");\r\n\r\n  const [isFileUploadPopupOpen, setFileUploadPopupOpen] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [customFileName, setCustomFileName] = useState(\"\");\r\n  const [selectedFolder, setSelectedFolder] = useState(\"\");\r\n  const [uploadedFilesState, setUploadedFilesState] = useState({});\r\n  const [folderVisibility, setFolderVisibility] = useState({});\r\n\r\n  const handleUploadButtonClick = () => {\r\n    setUploadMenuOpen(!isUploadMenuOpen);\r\n  };\r\n\r\n  const handleFileUploadButtonClick = () => {\r\n    setFileUploadPopupOpen(true);\r\n  };\r\n\r\n  const handleFileSelect = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!selectedFile || !selectedFolder) {\r\n        console.error(\"No file selected\");\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"files\", selectedFile);\r\n      formData.append(\"customFileName\", customFileName);\r\n      formData.append(\"selectedFolder\", selectedFolder);\r\n\r\n      formData.append(\"uploadDate\", new Date().toISOString());\r\n      formData.append(\"folderName\", selectedFolder);\r\n\r\n      const response = await axios.post(\"http://localhost:5000/upload_files\", formData);\r\n\r\n      const data = await response.json();\r\n      console.log(response.data.message);\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n    }\r\n  };\r\n\r\n  const handleNavigateToKeywordResult = () => {\r\n    navigate(`/keyword-result?keyword=${userKeyword}`);\r\n  };\r\n\r\n  const handleFolderIconClick = async (folderName) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/get_files?folder=${encodeURIComponent(folderName)}`);\r\n      const files = response.data;\r\n      console.log(files);\r\n\r\n      // 클릭한 폴더의 가시성을 토글합니다.\r\n      setFolderVisibility((prevVisibility) => ({\r\n        ...prevVisibility,\r\n        [folderName]: !prevVisibility[folderName],\r\n      }));\r\n      \r\n      // 파일 목록 상태를 업데이트합니다.\r\n      setFolderFiles((prevFiles) => ({\r\n        ...prevFiles,\r\n        [folderName]: files,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching files:', error);\r\n      // 에러 처리 로직 추가\r\n    }\r\n  };\r\n  \r\n  const handleCreateFolderButtonClick = () => {\r\n    setCreateFolderPopupOpen(true);\r\n  };\r\n\r\n  const handleCreateFolder = async () => {\r\n    if (newFolderName.trim() !== \"\") {\r\n      const newFolder = { name: newFolderName, id: Date.now() };\r\n      setAddedFolders((prevFolders) => [...prevFolders, newFolder]);\r\n      localStorage.setItem(\"addedFolders\", JSON.stringify([...addedFolders, newFolder]));\r\n      addFolder(newFolder);\r\n\r\n      // 서버에 새로운 폴더 정보 전송\r\n      try {\r\n        await axios.post(\"http://localhost:5000/create_folder\", { folder: newFolder });\r\n      } catch (error) {\r\n        console.error('Error creating folder:', error);\r\n        // 에러 처리 로직 추가\r\n      }\r\n\r\n      setNewFolderName(\"\");\r\n    }\r\n    setCreateFolderPopupOpen(false);\r\n  };\r\n\r\n  const handleItemClick = (item) => {\r\n    setSelectedItem(item);\r\n    setNewName(item.name);\r\n  };\r\n\r\n  const handleRename = () => {\r\n    if (newName.trim() !== \"\") {\r\n      const updatedFolders = addedFolders.map((folder) =>\r\n        folder.id === selectedItem.id ? { ...folder, name: newName } : folder\r\n      );\r\n      setAddedFolders(updatedFolders);\r\n      setRenamePopupOpen(false);\r\n      setSelectedItem(null);\r\n    }\r\n  };\r\n\r\n  const handleMoveToTrash = () => {\r\n    if (newName.trim() !== \"\") {\r\n      const updatedFolders = addedFolders.map((folder) =>\r\n        folder.id === selectedItem.id ? { ...folder, name: newName } : folder\r\n      );\r\n      setAddedFolders(updatedFolders);\r\n      setRenamePopupOpen(false);\r\n      setSelectedItem(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {addedFolders.map((folder) => (\r\n        <div key={folder.id}>\r\n          <div\r\n            className=\"folder-content\"\r\n            onClick={() => handleFolderIconClick(folder.name)}\r\n          >\r\n            <div className=\"folder-icon img\">\r\n              <img\r\n                src=\"/images/folder-icon.png\"\r\n                alt=\"폴더 아이콘\"\r\n                style={{ width: \"20px\", height: \"20px\" }}\r\n              />\r\n            </div>\r\n            <div className=\"folder-name\">{folder.name}</div>\r\n          </div>\r\n          {folderVisibility[folder.name] && (\r\n            <div className=\"uploaded-files-container\">\r\n              {folderFiles[folder.name] && folderFiles[folder.name].map((file, index) => (\r\n                <div key={index} className=\"uploaded-file\">\r\n                  <img src=\"/images/file-icon.png\" alt=\"File Icon\" className=\"file-icon\" />\r\n                  <div className=\"file-name\">{file.filename}</div>\r\n                  <div className=\"upload-date\">{file.uploadDate}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n  \r\n      <button className=\"upload-button\" onClick={handleUploadButtonClick}>\r\n        <img\r\n          src=\"/images/upload.png\"\r\n          alt=\"업로드 아이콘\"\r\n          style={{ width: \"40px\", height: \"35px\" }}\r\n        />\r\n      </button>\r\n  \r\n      {isUploadMenuOpen && (\r\n        <div className=\"upload-menu\">\r\n          <button\r\n            className=\"upload-menu-button\"\r\n            onClick={handleCreateFolderButtonClick}\r\n          >\r\n            폴더 생성\r\n          </button>\r\n          <button\r\n            className=\"upload-menu-button\"\r\n            onClick={handleFileUploadButtonClick}\r\n          >\r\n            파일 업로드\r\n          </button>\r\n        </div>\r\n      )}\r\n  \r\n      {isCreateFolderPopupOpen && (\r\n        <div className=\"create-folder-popup\">\r\n          <input\r\n            className=\"create-folder-input\"\r\n            type=\"text\"\r\n            placeholder=\"폴더명을 입력하세요\"\r\n            value={newFolderName}\r\n            onChange={(e) => setNewFolderName(e.target.value)}\r\n          />\r\n          <button className=\"create-folder-button\" onClick={handleCreateFolder}>\r\n            폴더 생성\r\n          </button>\r\n        </div>\r\n      )}\r\n  \r\n      {isFileUploadPopupOpen && (\r\n        <div className=\"file-upload-popup\">\r\n          <input\r\n            className=\"file-upload-input\"\r\n            type=\"file\"\r\n            onChange={handleFileSelect}\r\n          />\r\n          <input\r\n            className=\"file-upload-custom-input\"\r\n            type=\"text\"\r\n            placeholder=\"파일명을 입력하세요\"\r\n            value={customFileName}\r\n            onChange={(e) => setCustomFileName(e.target.value)}\r\n          />\r\n          <select\r\n            className=\"file-upload-select\"\r\n            value={selectedFolder}\r\n            onChange={(e) => setSelectedFolder(e.target.value)}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select a folder\r\n            </option>\r\n            {addedFolders.map((folder) => (\r\n              <option key={folder.id} value={folder.name}>\r\n                {folder.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button className=\"file-upload-button\" onClick={handleUpload}>\r\n            업로드\r\n          </button>\r\n        </div>\r\n      )}\r\n  \r\n      {isRenamePopupOpen && (\r\n        <div className=\"rename-popup\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"새로운 이름을 입력하세요\"\r\n            value={newName}\r\n            onChange={(e) => setNewName(e.target.value)}\r\n          />\r\n          <button onClick={handleRename}>이름 변경</button>\r\n          <button onClick={handleMoveToTrash}>휴지통으로 이동</button>\r\n        </div>\r\n      )}\r\n      {/* 검색 결과 표시 */}\r\n      {userKeyword && searchResults.length > 0 && (\r\n        <div className=\"search-results\">\r\n          <h2>검색 결과</h2>\r\n          {searchResults.map((result) => (\r\n            <div key={result.id} className=\"search-result\">\r\n              {result.type === 'folder' ? (\r\n                <img src=\"/images/folder-icon.png\" alt=\"폴더 아이콘\" className=\"folder-icon\" />\r\n              ) : (\r\n                <img src=\"/images/file-icon.png\" alt=\"파일 아이콘\" className=\"file-icon\" />\r\n              )}\r\n              <div className=\"result-name\">{result.name}</div>\r\n              {/* 다른 요소는 필요에 따라 추가 */}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}