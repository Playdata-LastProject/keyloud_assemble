{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\AppData\\\\Roaming\\\\SPB_Data\\\\keyloud_assemble\\\\frontend\\\\src\\\\components\\\\HomeScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles/HomeScreen.css\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"../AppContext.js\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [searchResults, setSearchResults] = useState([]);\n  const {\n    folders,\n    uploadedFiles,\n    addFolder,\n    addFileToFolder,\n    setUploadedFiles\n  } = useContext(AppContext);\n  const [isUploadMenuOpen, setUploadMenuOpen] = useState(false);\n  const [addedFolders, setAddedFolders] = useState([{\n    name: \"최근 업로드 폴더\",\n    id: 1\n  }]);\n  const [userKeyword, setUserKeyword] = useState(\"\");\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [isRenamePopupOpen, setRenamePopupOpen] = useState(false);\n  const [newName, setNewName] = useState(\"\");\n  const [folderFiles, setFolderFiles] = useState({});\n  useEffect(() => {\n    // 폴더가 변경되면 해당 폴더에 대한 파일 목록을 가져옴\n    if (selectedFolder) {\n      handleFolderIconClick(selectedFolder);\n    }\n  }, [selectedFolder]);\n  useEffect(() => {\n    // 페이지 로드 시 로컬 스토리지에서 uploadedFiles 값을 가져옴\n    const storedUploadedFiles = localStorage.getItem(\"uploadedFiles\");\n    if (storedUploadedFiles) {\n      setUploadedFiles(JSON.parse(storedUploadedFiles));\n    }\n\n    // 로컬 스토리지에서 폴더 정보를 가져옴\n    const storedFolders = localStorage.getItem(\"addedFolders\");\n    if (storedFolders) {\n      setAddedFolders(JSON.parse(storedFolders));\n    } else {\n      // 초기 폴더 정보 설정\n      setAddedFolders([{\n        name: \"최근 업로드 폴더\",\n        id: 1\n      }]);\n      localStorage.setItem(\"addedFolders\", JSON.stringify([{\n        name: \"최근 업로드 폴더\",\n        id: 1\n      }]));\n    }\n  }, [setUploadedFiles, setAddedFolders]);\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      localStorage.setItem(\"uploadedFiles\", JSON.stringify(uploadedFiles));\n      localStorage.setItem(\"addedFolders\", JSON.stringify(addedFolders));\n    };\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n  }, [uploadedFiles, addedFolders]);\n  const [isCreateFolderPopupOpen, setCreateFolderPopupOpen] = useState(false);\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const [isFileUploadPopupOpen, setFileUploadPopupOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [customFileName, setCustomFileName] = useState(\"\");\n  const [selectedFolder, setSelectedFolder] = useState(\"\");\n  const [uploadedFilesState, setUploadedFilesState] = useState({});\n  const handleUploadButtonClick = () => {\n    setUploadMenuOpen(!isUploadMenuOpen);\n  };\n  const handleFileUploadButtonClick = () => {\n    setFileUploadPopupOpen(true);\n  };\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n  };\n  const handleUpload = async () => {\n    try {\n      if (!selectedFile || !selectedFolder) {\n        console.error(\"No file selected\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"files\", selectedFile);\n      formData.append(\"customFileName\", customFileName);\n      formData.append(\"selectedFolder\", selectedFolder);\n      formData.append(\"uploadDate\", new Date().toISOString());\n      formData.append(\"folderName\", selectedFolder);\n      const response = await axios.post(\"http://localhost:5000/upload_files\", formData);\n      const data = await response.json();\n      console.log(response.data.message);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    }\n  };\n  const handleNavigateToKeywordResult = () => {\n    navigate(`/keyword-result?keyword=${userKeyword}`);\n  };\n  const handleFolderIconClick = async folderName => {\n    try {\n      const response = await axios.get(`http://localhost:5000/get_files?folder=${encodeURIComponent(folderName)}`);\n      const files = response.data;\n      console.log(files); // 서버에서 받아온 파일 목록 출력 또는 상태 업데이트 등 필요한 작업 수행\n      setFolderFiles(prevFiles => ({\n        ...prevFiles,\n        [folderName]: files\n      }));\n      setSelectedFolder(folderName);\n      console.log('Folder Files:', folderFiles); // 파일 목록을 콘솔에 출력\n    } catch (error) {\n      console.error('Error fetching files:', error);\n      // 에러 처리 로직 추가\n    }\n  };\n  const handleCreateFolderButtonClick = () => {\n    setCreateFolderPopupOpen(true);\n  };\n  const handleCreateFolder = async () => {\n    if (newFolderName.trim() !== \"\") {\n      const newFolder = {\n        name: newFolderName,\n        id: Date.now()\n      };\n      setAddedFolders(prevFolders => [...prevFolders, newFolder]);\n      localStorage.setItem(\"addedFolders\", JSON.stringify([...addedFolders, newFolder]));\n      addFolder(newFolder);\n\n      // 서버에 새로운 폴더 정보 전송\n      try {\n        await axios.post(\"http://localhost:5000/create_folder\", {\n          folder: newFolder\n        });\n      } catch (error) {\n        console.error('Error creating folder:', error);\n        // 에러 처리 로직 추가\n      }\n      setNewFolderName(\"\");\n    }\n    setCreateFolderPopupOpen(false);\n  };\n  const handleItemClick = item => {\n    setSelectedItem(item);\n    setNewName(item.name);\n  };\n  const handleRename = () => {\n    if (newName.trim() !== \"\") {\n      const updatedFolders = addedFolders.map(folder => folder.id === selectedItem.id ? {\n        ...folder,\n        name: newName\n      } : folder);\n      setAddedFolders(updatedFolders);\n      setRenamePopupOpen(false);\n      setSelectedItem(null);\n    }\n  };\n  const handleMoveToTrash = () => {\n    if (newName.trim() !== \"\") {\n      const updatedFolders = addedFolders.map(folder => folder.id === selectedItem.id ? {\n        ...folder,\n        name: newName\n      } : folder);\n      setAddedFolders(updatedFolders);\n      setRenamePopupOpen(false);\n      setSelectedItem(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [addedFolders.map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-content\",\n        onClick: () => handleFolderIconClick(folder.name),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folder-icon img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/folder-icon.png\",\n            alt: \"\\uD3F4\\uB354 \\uC544\\uC774\\uCF58\",\n            style: {\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folder-name\",\n          children: folder.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploaded-files-container\",\n        children: folderFiles[folder.name] && folderFiles[folder.name].map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploaded-file\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/file-icon.png\",\n            alt: \"File Icon\",\n            className: \"file-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-name\",\n            children: file.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-date\",\n            children: file.uploadDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, folder.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upload-button\",\n      onClick: handleUploadButtonClick,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/upload.png\",\n        alt: \"\\uC5C5\\uB85C\\uB4DC \\uC544\\uC774\\uCF58\",\n        style: {\n          width: \"40px\",\n          height: \"35px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), isUploadMenuOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-menu-button\",\n        onClick: handleCreateFolderButtonClick,\n        children: \"\\uD3F4\\uB354 \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-menu-button\",\n        onClick: handleFileUploadButtonClick,\n        children: \"\\uD30C\\uC77C \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this), isCreateFolderPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-folder-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"create-folder-input\",\n        type: \"text\",\n        placeholder: \"\\uD3F4\\uB354\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: newFolderName,\n        onChange: e => setNewFolderName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-folder-button\",\n        onClick: handleCreateFolder,\n        children: \"\\uD3F4\\uB354 \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), isFileUploadPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"file-upload-input\",\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"file-upload-custom-input\",\n        type: \"text\",\n        placeholder: \"\\uD30C\\uC77C\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: customFileName,\n        onChange: e => setCustomFileName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"file-upload-select\",\n        value: selectedFolder,\n        onChange: e => setSelectedFolder(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), addedFolders.map(folder => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: folder.name,\n          children: folder.name\n        }, folder.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"file-upload-button\",\n        onClick: handleUpload,\n        children: \"\\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this), isRenamePopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rename-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uC0C8\\uB85C\\uC6B4 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        value: newName,\n        onChange: e => setNewName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRename,\n        children: \"\\uC774\\uB984 \\uBCC0\\uACBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMoveToTrash,\n        children: \"\\uD734\\uC9C0\\uD1B5\\uC73C\\uB85C \\uC774\\uB3D9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeScreen, \"/ZPIUxKH0vzaC0g8wj7YG0NwUxw=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeScreen;\nexport default HomeScreen;\nvar _c;\n$RefreshReg$(_c, \"HomeScreen\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AppContext","useNavigate","axios","jsxDEV","_jsxDEV","HomeScreen","_s","navigate","searchResults","setSearchResults","folders","uploadedFiles","addFolder","addFileToFolder","setUploadedFiles","isUploadMenuOpen","setUploadMenuOpen","addedFolders","setAddedFolders","name","id","userKeyword","setUserKeyword","selectedItem","setSelectedItem","isRenamePopupOpen","setRenamePopupOpen","newName","setNewName","folderFiles","setFolderFiles","selectedFolder","handleFolderIconClick","storedUploadedFiles","localStorage","getItem","JSON","parse","storedFolders","setItem","stringify","handleBeforeUnload","window","addEventListener","removeEventListener","isCreateFolderPopupOpen","setCreateFolderPopupOpen","newFolderName","setNewFolderName","isFileUploadPopupOpen","setFileUploadPopupOpen","selectedFile","setSelectedFile","customFileName","setCustomFileName","setSelectedFolder","uploadedFilesState","setUploadedFilesState","handleUploadButtonClick","handleFileUploadButtonClick","handleFileSelect","event","file","target","files","handleUpload","console","error","formData","FormData","append","Date","toISOString","response","post","data","json","log","message","handleNavigateToKeywordResult","folderName","get","encodeURIComponent","prevFiles","handleCreateFolderButtonClick","handleCreateFolder","trim","newFolder","now","prevFolders","folder","handleItemClick","item","handleRename","updatedFolders","map","handleMoveToTrash","children","className","onClick","src","alt","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","index","filename","uploadDate","type","placeholder","value","onChange","e","disabled","_c","$RefreshReg$"],"sources":["C:/Users/USER/AppData/Roaming/SPB_Data/keyloud_assemble/frontend/src/components/HomeScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/HomeScreen.css\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../AppContext.js\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nconst HomeScreen = () => {\r\n  const navigate = useNavigate();\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const {\r\n    folders,\r\n    uploadedFiles,\r\n    addFolder,\r\n    addFileToFolder,\r\n    setUploadedFiles,\r\n  } = useContext(AppContext);\r\n  const [isUploadMenuOpen, setUploadMenuOpen] = useState(false);\r\n  const [addedFolders, setAddedFolders] = useState([\r\n    { name: \"최근 업로드 폴더\", id: 1 },\r\n  ]);\r\n  const [userKeyword, setUserKeyword] = useState(\"\");\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [isRenamePopupOpen, setRenamePopupOpen] = useState(false);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [folderFiles, setFolderFiles] = useState({});\r\n\r\n  useEffect(() => {\r\n    // 폴더가 변경되면 해당 폴더에 대한 파일 목록을 가져옴\r\n    if (selectedFolder) {\r\n      handleFolderIconClick(selectedFolder);\r\n    }\r\n  }, [selectedFolder]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // 페이지 로드 시 로컬 스토리지에서 uploadedFiles 값을 가져옴\r\n    const storedUploadedFiles = localStorage.getItem(\"uploadedFiles\");\r\n    if (storedUploadedFiles) {\r\n      setUploadedFiles(JSON.parse(storedUploadedFiles));\r\n    }\r\n\r\n    // 로컬 스토리지에서 폴더 정보를 가져옴\r\n    const storedFolders = localStorage.getItem(\"addedFolders\");\r\n    if (storedFolders) {\r\n      setAddedFolders(JSON.parse(storedFolders));\r\n    } else {\r\n      // 초기 폴더 정보 설정\r\n      setAddedFolders([{ name: \"최근 업로드 폴더\", id: 1 }]);\r\n      localStorage.setItem(\"addedFolders\", JSON.stringify([{ name: \"최근 업로드 폴더\", id: 1 }]));\r\n    }\r\n  }, [setUploadedFiles, setAddedFolders]);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      localStorage.setItem(\"uploadedFiles\", JSON.stringify(uploadedFiles));\r\n      localStorage.setItem(\"addedFolders\", JSON.stringify(addedFolders));\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n    };\r\n  }, [uploadedFiles, addedFolders]);\r\n\r\n  const [isCreateFolderPopupOpen, setCreateFolderPopupOpen] = useState(false);\r\n  const [newFolderName, setNewFolderName] = useState(\"\");\r\n\r\n  const [isFileUploadPopupOpen, setFileUploadPopupOpen] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [customFileName, setCustomFileName] = useState(\"\");\r\n  const [selectedFolder, setSelectedFolder] = useState(\"\");\r\n  const [uploadedFilesState, setUploadedFilesState] = useState({});\r\n\r\n  const handleUploadButtonClick = () => {\r\n    setUploadMenuOpen(!isUploadMenuOpen);\r\n  };\r\n\r\n  const handleFileUploadButtonClick = () => {\r\n    setFileUploadPopupOpen(true);\r\n  };\r\n\r\n  const handleFileSelect = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      if (!selectedFile || !selectedFolder) {\r\n        console.error(\"No file selected\");\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"files\", selectedFile);\r\n      formData.append(\"customFileName\", customFileName);\r\n      formData.append(\"selectedFolder\", selectedFolder);\r\n\r\n      formData.append(\"uploadDate\", new Date().toISOString());\r\n      formData.append(\"folderName\", selectedFolder);\r\n\r\n      const response = await axios.post(\"http://localhost:5000/upload_files\", formData);\r\n\r\n      const data = await response.json();\r\n      console.log(response.data.message);\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n    }\r\n  };\r\n\r\n  const handleNavigateToKeywordResult = () => {\r\n    navigate(`/keyword-result?keyword=${userKeyword}`);\r\n  };\r\n\r\n  const handleFolderIconClick = async (folderName) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/get_files?folder=${encodeURIComponent(folderName)}`);\r\n      const files = response.data;\r\n      console.log(files); // 서버에서 받아온 파일 목록 출력 또는 상태 업데이트 등 필요한 작업 수행\r\n      setFolderFiles((prevFiles) => ({ ...prevFiles, [folderName]: files }));\r\n      setSelectedFolder(folderName);\r\n      console.log('Folder Files:', folderFiles); // 파일 목록을 콘솔에 출력\r\n    } catch (error) {\r\n      console.error('Error fetching files:', error);\r\n      // 에러 처리 로직 추가\r\n    }\r\n  };\r\n\r\n  \r\n  const handleCreateFolderButtonClick = () => {\r\n    setCreateFolderPopupOpen(true);\r\n  };\r\n\r\n  const handleCreateFolder = async () => {\r\n    if (newFolderName.trim() !== \"\") {\r\n      const newFolder = { name: newFolderName, id: Date.now() };\r\n      setAddedFolders((prevFolders) => [...prevFolders, newFolder]);\r\n      localStorage.setItem(\"addedFolders\", JSON.stringify([...addedFolders, newFolder]));\r\n      addFolder(newFolder);\r\n\r\n      // 서버에 새로운 폴더 정보 전송\r\n      try {\r\n        await axios.post(\"http://localhost:5000/create_folder\", { folder: newFolder });\r\n      } catch (error) {\r\n        console.error('Error creating folder:', error);\r\n        // 에러 처리 로직 추가\r\n      }\r\n\r\n      setNewFolderName(\"\");\r\n    }\r\n    setCreateFolderPopupOpen(false);\r\n  };\r\n\r\n  const handleItemClick = (item) => {\r\n    setSelectedItem(item);\r\n    setNewName(item.name);\r\n  };\r\n\r\n  const handleRename = () => {\r\n    if (newName.trim() !== \"\") {\r\n      const updatedFolders = addedFolders.map((folder) =>\r\n        folder.id === selectedItem.id ? { ...folder, name: newName } : folder\r\n      );\r\n      setAddedFolders(updatedFolders);\r\n      setRenamePopupOpen(false);\r\n      setSelectedItem(null);\r\n    }\r\n  };\r\n\r\n  const handleMoveToTrash = () => {\r\n    if (newName.trim() !== \"\") {\r\n      const updatedFolders = addedFolders.map((folder) =>\r\n        folder.id === selectedItem.id ? { ...folder, name: newName } : folder\r\n      );\r\n      setAddedFolders(updatedFolders);\r\n      setRenamePopupOpen(false);\r\n      setSelectedItem(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {addedFolders.map((folder) => (\r\n        <div key={folder.id}>\r\n          <div\r\n            className=\"folder-content\"\r\n            onClick={() => handleFolderIconClick(folder.name)}\r\n          >\r\n            <div className=\"folder-icon img\">\r\n              <img\r\n                src=\"/images/folder-icon.png\"\r\n                alt=\"폴더 아이콘\"\r\n                style={{ width: \"20px\", height: \"20px\" }}\r\n              />\r\n            </div>\r\n            <div className=\"folder-name\">{folder.name}</div>\r\n          </div>\r\n          <div className=\"uploaded-files-container\">\r\n            {folderFiles[folder.name] && folderFiles[folder.name].map((file, index) => (\r\n              <div key={index} className=\"uploaded-file\">\r\n                <img src=\"/images/file-icon.png\" alt=\"File Icon\" className=\"file-icon\" />\r\n\r\n                <div className=\"file-name\">{file.filename}</div>\r\n                <div className=\"upload-date\">{file.uploadDate}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n      <button className=\"upload-button\" onClick={handleUploadButtonClick}>\r\n        <img\r\n          src=\"/images/upload.png\"\r\n          alt=\"업로드 아이콘\"\r\n          style={{ width: \"40px\", height: \"35px\" }}\r\n        />\r\n      </button>\r\n\r\n      {isUploadMenuOpen && (\r\n        <div className=\"upload-menu\">\r\n          <button\r\n            className=\"upload-menu-button\"\r\n            onClick={handleCreateFolderButtonClick}\r\n          >\r\n            폴더 생성\r\n          </button>\r\n          <button\r\n            className=\"upload-menu-button\"\r\n            onClick={handleFileUploadButtonClick}\r\n          >\r\n            파일 업로드\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isCreateFolderPopupOpen && (\r\n        <div className=\"create-folder-popup\">\r\n          <input\r\n            className=\"create-folder-input\"\r\n            type=\"text\"\r\n            placeholder=\"폴더명을 입력하세요\"\r\n            value={newFolderName}\r\n            onChange={(e) => setNewFolderName(e.target.value)}\r\n          />\r\n          <button className=\"create-folder-button\" onClick={handleCreateFolder}>\r\n            폴더 생성\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isFileUploadPopupOpen && (\r\n        <div className=\"file-upload-popup\">\r\n          <input\r\n            className=\"file-upload-input\"\r\n            type=\"file\"\r\n            onChange={handleFileSelect}\r\n          />\r\n          <input\r\n            className=\"file-upload-custom-input\"\r\n            type=\"text\"\r\n            placeholder=\"파일명을 입력하세요\"\r\n            value={customFileName}\r\n            onChange={(e) => setCustomFileName(e.target.value)}\r\n          />\r\n          <select\r\n            className=\"file-upload-select\"\r\n            value={selectedFolder}\r\n            onChange={(e) => setSelectedFolder(e.target.value)}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select a folder\r\n            </option>\r\n            {addedFolders.map((folder) => (\r\n              <option key={folder.id} value={folder.name}>\r\n                {folder.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button className=\"file-upload-button\" onClick={handleUpload}>\r\n            업로드\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isRenamePopupOpen && (\r\n        <div className=\"rename-popup\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"새로운 이름을 입력하세요\"\r\n            value={newName}\r\n            onChange={(e) => setNewName(e.target.value)}\r\n          />\r\n          <button onClick={handleRename}>이름 변경</button>\r\n          <button onClick={handleMoveToTrash}>휴지통으로 이동</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}